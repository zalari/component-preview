/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  History,
} from 'history';
import {
  PreviewPaths,
} from './types/preview-paths.type';
import {
  ElementTagName,
} from './classes/preview-store.class';
import {
  ElementMetaData,
} from './interfaces/element-metadata.interface';
import {
  PreviewOptions,
} from './interfaces/preview-options.interface';
import {
  PreviewOptionValue,
} from './types/preview-option-value.type';
import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface PreviewNavigation {
    'activeSlug'?: string;
    'activeTagName'?: ElementTagName;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'history': History;
    'paths': PreviewPaths;
  }
  interface PreviewNavigationAttributes extends StencilHTMLAttributes {
    'activeSlug'?: string;
    'activeTagName'?: ElementTagName;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'history': History;
    'paths': PreviewPaths;
  }

  interface PreviewProperties {
    'activeTagName': ElementTagName;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
  }
  interface PreviewPropertiesAttributes extends StencilHTMLAttributes {
    'activeTagName': ElementTagName;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
    'onPropertyChange'?: (event: CustomEvent<[string, any]>) => void;
  }

  interface PreviewPropertyBoolean {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label': string;
    'value': boolean;
  }
  interface PreviewPropertyBooleanAttributes extends StencilHTMLAttributes {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label'?: string;
    'onChange'?: (event: CustomEvent<boolean>) => void;
    'value'?: boolean;
  }

  interface PreviewPropertySelect {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label': string;
    'options': PreviewOptions['options'];
    'value': PreviewOptionValue;
  }
  interface PreviewPropertySelectAttributes extends StencilHTMLAttributes {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label'?: string;
    'onChange'?: (event: CustomEvent<PreviewOptionValue>) => void;
    'options'?: PreviewOptions['options'];
    'value'?: PreviewOptionValue;
  }

  interface PreviewPropertyText {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label': string;
    'multi': boolean;
    'type': 'string' | 'number';
    'value': string | number;
  }
  interface PreviewPropertyTextAttributes extends StencilHTMLAttributes {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'label'?: string;
    'multi'?: boolean;
    'onChange'?: (event: CustomEvent<string | number>) => void;
    'type'?: 'string' | 'number';
    'value'?: string | number;
  }

  interface PreviewRenderer {
    'activeTagName': any;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
  }
  interface PreviewRendererAttributes extends StencilHTMLAttributes {
    'activeTagName': any;
    'darkTheme': boolean;
    'gridVisible': boolean;
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
  }

  interface PreviewSettings {
    'darkTheme': boolean;
    'gridVisible': boolean;
  }
  interface PreviewSettingsAttributes extends StencilHTMLAttributes {
    'darkTheme': boolean;
    'gridVisible': boolean;
    'onGridVisibilityChanged'?: (event: CustomEvent<boolean>) => void;
    'onThemeChanged'?: (event: CustomEvent<boolean>) => void;
  }

  interface PreviewRoot {
    'darkTheme': boolean;
    'gridVisible': boolean;
  }
  interface PreviewRootAttributes extends StencilHTMLAttributes {
    'darkTheme'?: boolean;
    'gridVisible'?: boolean;
  }

  interface PreviewCode {
    'activeTagName': ElementTagName;
    'indent': number;
    'indentWith': ' ' | '\t';
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
  }
  interface PreviewCodeAttributes extends StencilHTMLAttributes {
    'activeTagName': ElementTagName;
    'indent'?: number;
    'indentWith'?: ' ' | '\t';
    'metadata': ElementMetaData<Partial<PreviewOptions>>;
  }

  interface PreviewSwitch {
    'active': boolean;
    'darkTheme': boolean;
    'disabled': boolean;
    'gridVisible': boolean;
  }
  interface PreviewSwitchAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'darkTheme': boolean;
    'disabled'?: boolean;
    'gridVisible': boolean;
    'onToggle'?: (event: CustomEvent<boolean>) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'PreviewNavigation': Components.PreviewNavigation;
    'PreviewProperties': Components.PreviewProperties;
    'PreviewPropertyBoolean': Components.PreviewPropertyBoolean;
    'PreviewPropertySelect': Components.PreviewPropertySelect;
    'PreviewPropertyText': Components.PreviewPropertyText;
    'PreviewRenderer': Components.PreviewRenderer;
    'PreviewSettings': Components.PreviewSettings;
    'PreviewRoot': Components.PreviewRoot;
    'PreviewCode': Components.PreviewCode;
    'PreviewSwitch': Components.PreviewSwitch;
  }

  interface StencilIntrinsicElements {
    'preview-navigation': Components.PreviewNavigationAttributes;
    'preview-properties': Components.PreviewPropertiesAttributes;
    'preview-property-boolean': Components.PreviewPropertyBooleanAttributes;
    'preview-property-select': Components.PreviewPropertySelectAttributes;
    'preview-property-text': Components.PreviewPropertyTextAttributes;
    'preview-renderer': Components.PreviewRendererAttributes;
    'preview-settings': Components.PreviewSettingsAttributes;
    'preview-root': Components.PreviewRootAttributes;
    'preview-code': Components.PreviewCodeAttributes;
    'preview-switch': Components.PreviewSwitchAttributes;
  }


  interface HTMLPreviewNavigationElement extends Components.PreviewNavigation, HTMLStencilElement {}
  var HTMLPreviewNavigationElement: {
    prototype: HTMLPreviewNavigationElement;
    new (): HTMLPreviewNavigationElement;
  };

  interface HTMLPreviewPropertiesElement extends Components.PreviewProperties, HTMLStencilElement {}
  var HTMLPreviewPropertiesElement: {
    prototype: HTMLPreviewPropertiesElement;
    new (): HTMLPreviewPropertiesElement;
  };

  interface HTMLPreviewPropertyBooleanElement extends Components.PreviewPropertyBoolean, HTMLStencilElement {}
  var HTMLPreviewPropertyBooleanElement: {
    prototype: HTMLPreviewPropertyBooleanElement;
    new (): HTMLPreviewPropertyBooleanElement;
  };

  interface HTMLPreviewPropertySelectElement extends Components.PreviewPropertySelect, HTMLStencilElement {}
  var HTMLPreviewPropertySelectElement: {
    prototype: HTMLPreviewPropertySelectElement;
    new (): HTMLPreviewPropertySelectElement;
  };

  interface HTMLPreviewPropertyTextElement extends Components.PreviewPropertyText, HTMLStencilElement {}
  var HTMLPreviewPropertyTextElement: {
    prototype: HTMLPreviewPropertyTextElement;
    new (): HTMLPreviewPropertyTextElement;
  };

  interface HTMLPreviewRendererElement extends Components.PreviewRenderer, HTMLStencilElement {}
  var HTMLPreviewRendererElement: {
    prototype: HTMLPreviewRendererElement;
    new (): HTMLPreviewRendererElement;
  };

  interface HTMLPreviewSettingsElement extends Components.PreviewSettings, HTMLStencilElement {}
  var HTMLPreviewSettingsElement: {
    prototype: HTMLPreviewSettingsElement;
    new (): HTMLPreviewSettingsElement;
  };

  interface HTMLPreviewRootElement extends Components.PreviewRoot, HTMLStencilElement {}
  var HTMLPreviewRootElement: {
    prototype: HTMLPreviewRootElement;
    new (): HTMLPreviewRootElement;
  };

  interface HTMLPreviewCodeElement extends Components.PreviewCode, HTMLStencilElement {}
  var HTMLPreviewCodeElement: {
    prototype: HTMLPreviewCodeElement;
    new (): HTMLPreviewCodeElement;
  };

  interface HTMLPreviewSwitchElement extends Components.PreviewSwitch, HTMLStencilElement {}
  var HTMLPreviewSwitchElement: {
    prototype: HTMLPreviewSwitchElement;
    new (): HTMLPreviewSwitchElement;
  };

  interface HTMLElementTagNameMap {
    'preview-navigation': HTMLPreviewNavigationElement
    'preview-properties': HTMLPreviewPropertiesElement
    'preview-property-boolean': HTMLPreviewPropertyBooleanElement
    'preview-property-select': HTMLPreviewPropertySelectElement
    'preview-property-text': HTMLPreviewPropertyTextElement
    'preview-renderer': HTMLPreviewRendererElement
    'preview-settings': HTMLPreviewSettingsElement
    'preview-root': HTMLPreviewRootElement
    'preview-code': HTMLPreviewCodeElement
    'preview-switch': HTMLPreviewSwitchElement
  }

  interface ElementTagNameMap {
    'preview-navigation': HTMLPreviewNavigationElement;
    'preview-properties': HTMLPreviewPropertiesElement;
    'preview-property-boolean': HTMLPreviewPropertyBooleanElement;
    'preview-property-select': HTMLPreviewPropertySelectElement;
    'preview-property-text': HTMLPreviewPropertyTextElement;
    'preview-renderer': HTMLPreviewRendererElement;
    'preview-settings': HTMLPreviewSettingsElement;
    'preview-root': HTMLPreviewRootElement;
    'preview-code': HTMLPreviewCodeElement;
    'preview-switch': HTMLPreviewSwitchElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
